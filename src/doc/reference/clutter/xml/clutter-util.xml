<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version "1.0.6">
]>

<refentry id="clutter-Utilities">
<refmeta>
<refentrytitle role="top_of_page" id="clutter-Utilities.top_of_page">Utilities</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>CLUTTER Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Utilities</refname>
<refpurpose>Misc utility functions.</refpurpose>
</refnamediv>

<refsynopsisdiv id="clutter-Utilities.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="int">int</link>                 <link linkend="clutter-util-next-p2">clutter_util_next_p2</link>                (<link linkend="int">int</link> a);

<link linkend="ClutterTimeoutPool">ClutterTimeoutPool</link> * <link linkend="clutter-timeout-pool-new">clutter_timeout_pool_new</link>           (<link linkend="gint">gint</link> priority);
<link linkend="guint">guint</link>               <link linkend="clutter-timeout-pool-add">clutter_timeout_pool_add</link>            (<link linkend="ClutterTimeoutPool">ClutterTimeoutPool</link> *pool,
                                                         <link linkend="guint">guint</link> fps,
                                                         <link linkend="GSourceFunc">GSourceFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> notify);
<link linkend="void">void</link>                <link linkend="clutter-timeout-pool-remove">clutter_timeout_pool_remove</link>         (<link linkend="ClutterTimeoutPool">ClutterTimeoutPool</link> *pool,
                                                         <link linkend="guint">guint</link> id);

<link linkend="guint">guint</link>               <link linkend="clutter-frame-source-add">clutter_frame_source_add</link>            (<link linkend="guint">guint</link> fps,
                                                         <link linkend="GSourceFunc">GSourceFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="guint">guint</link>               <link linkend="clutter-frame-source-add-full">clutter_frame_source_add_full</link>       (<link linkend="gint">gint</link> priority,
                                                         <link linkend="guint">guint</link> fps,
                                                         <link linkend="GSourceFunc">GSourceFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> notify);

                    <link linkend="ClutterParamSpecFixed">ClutterParamSpecFixed</link>;
<link linkend="GParamSpec">GParamSpec</link> *        <link linkend="clutter-param-spec-fixed">clutter_param_spec_fixed</link>            (const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *nick,
                                                         const <link linkend="gchar">gchar</link> *blurb,
                                                         <link linkend="CoglFixed">CoglFixed</link> minimum,
                                                         <link linkend="CoglFixed">CoglFixed</link> maximum,
                                                         <link linkend="CoglFixed">CoglFixed</link> default_value,
                                                         <link linkend="GParamFlags">GParamFlags</link> flags);
#define             <link linkend="CLUTTER-VALUE-HOLDS-FIXED--CAPS">CLUTTER_VALUE_HOLDS_FIXED</link>           (x)
<link linkend="void">void</link>                <link linkend="clutter-value-set-fixed">clutter_value_set_fixed</link>             (<link linkend="GValue">GValue</link> *value,
                                                         <link linkend="CoglFixed">CoglFixed</link> fixed_);
<link linkend="CoglFixed">CoglFixed</link>           <link linkend="clutter-value-get-fixed">clutter_value_get_fixed</link>             (const <link linkend="GValue">GValue</link> *value);
</synopsis>
</refsynopsisdiv>









<refsect1 id="clutter-Utilities.description" role="desc">
<title role="desc.title">Description</title>
<para>
Various misc utilility functions.</para>
<para>
</para>
</refsect1>

<refsect1 id="clutter-Utilities.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="clutter-util-next-p2" role="function">
<title>clutter_util_next_p2 ()</title>
<indexterm zone="clutter-util-next-p2"><primary sortas="util_next_p2">clutter_util_next_p2</primary></indexterm><programlisting><link linkend="int">int</link>                 clutter_util_next_p2                (<link linkend="int">int</link> a);</programlisting>
<para>
Calculates the nearest power of two, greater than or equal to <parameter>a</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara> Value to get the next power
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The nearest power of two, greater or equal to <parameter>a</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-timeout-pool-new" role="function" condition="since:0.4">
<title>clutter_timeout_pool_new ()</title>
<indexterm zone="clutter-timeout-pool-new" role="0.4"><primary sortas="timeout_pool_new">clutter_timeout_pool_new</primary></indexterm><programlisting><link linkend="ClutterTimeoutPool">ClutterTimeoutPool</link> * clutter_timeout_pool_new           (<link linkend="gint">gint</link> priority);</programlisting>
<para>
Creates a new timeout pool source. A timeout pool should be used when
multiple timeout functions, running at the same priority, are needed and
the <link linkend="g-timeout-add"><function>g_timeout_add()</function></link> API might lead to starvation of the time slice of
the main loop. A timeout pool allocates a single time slice of the main
loop and runs every timeout function inside it. The timeout pool is
always sorted, so that the extraction of the next timeout function is
a constant time operation.
</para>
<para>
Inside Clutter, every <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> share the same timeout pool, unless
the CLUTTER_TIMELINE=no-pool environment variable is set.
</para>
<para>
<link linkend="ClutterTimeoutPool"><type>ClutterTimeoutPool</type></link> is part of the <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> implementation
and should not be used by application developers.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>priority</parameter>&#160;:</term>
<listitem><simpara> the priority of the timeout pool. Typically this will
  be <link linkend="G-PRIORITY-DEFAULT--CAPS"><type>G_PRIORITY_DEFAULT</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the newly created <link linkend="ClutterTimeoutPool"><type>ClutterTimeoutPool</type></link>. The created pool
  is owned by the GLib default context and will be automatically
  destroyed when the context is destroyed. It is possible to force
  the destruction of the timeout pool using <link linkend="g-source-destroy"><function>g_source_destroy()</function></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.4</para></refsect2>
<refsect2 id="clutter-timeout-pool-add" role="function" condition="since:0.4">
<title>clutter_timeout_pool_add ()</title>
<indexterm zone="clutter-timeout-pool-add" role="0.4"><primary sortas="timeout_pool_add">clutter_timeout_pool_add</primary></indexterm><programlisting><link linkend="guint">guint</link>               clutter_timeout_pool_add            (<link linkend="ClutterTimeoutPool">ClutterTimeoutPool</link> *pool,
                                                         <link linkend="guint">guint</link> fps,
                                                         <link linkend="GSourceFunc">GSourceFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> notify);</programlisting>
<para>
Sets a function to be called at regular intervals, and puts it inside
the <parameter>pool</parameter>. The function is repeatedly called until it returns <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>,
at which point the timeout is automatically destroyed and the function
won't be called again. If <parameter>notify</parameter> is not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, the <parameter>notify</parameter> function
will be called. The first call to <parameter>func</parameter> will be at the end of <parameter>interval</parameter>.
</para>
<para>
Since version 0.8 this will try to compensate for delays. For
example, if <parameter>func</parameter> takes half the interval time to execute then the
function will be called again half the interval time after it
finished. Before version 0.8 it would not fire until a full
interval after the function completes so the delay between calls
would be <parameter>interval</parameter> * 1.5. This function does not however try to
invoke the function multiple times to catch up missing frames if
<parameter>func</parameter> takes more than <parameter>interval</parameter> ms to execute.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeoutPool"><type>ClutterTimeoutPool</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fps</parameter>&#160;:</term>
<listitem><simpara> the time between calls to the function, in frames per second
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> function to call
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> data to pass to the function, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>notify</parameter>&#160;:</term>
<listitem><simpara> function to call when the timeout is removed, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the ID (greater than 0) of the timeout inside the pool.
  Use <link linkend="clutter-timeout-pool-remove"><function>clutter_timeout_pool_remove()</function></link> to stop the timeout.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.4</para></refsect2>
<refsect2 id="clutter-timeout-pool-remove" role="function" condition="since:0.4">
<title>clutter_timeout_pool_remove ()</title>
<indexterm zone="clutter-timeout-pool-remove" role="0.4"><primary sortas="timeout_pool_remove">clutter_timeout_pool_remove</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeout_pool_remove         (<link linkend="ClutterTimeoutPool">ClutterTimeoutPool</link> *pool,
                                                         <link linkend="guint">guint</link> id);</programlisting>
<para>
Removes a timeout function with <parameter>id</parameter> from the timeout pool. The id
is the same returned when adding a function to the timeout pool with
<link linkend="clutter-timeout-pool-add"><function>clutter_timeout_pool_add()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeoutPool"><type>ClutterTimeoutPool</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> the id of the timeout to remove
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.4</para></refsect2>
<refsect2 id="clutter-frame-source-add" role="function" condition="since:0.8">
<title>clutter_frame_source_add ()</title>
<indexterm zone="clutter-frame-source-add" role="0.8"><primary sortas="frame_source_add">clutter_frame_source_add</primary></indexterm><programlisting><link linkend="guint">guint</link>               clutter_frame_source_add            (<link linkend="guint">guint</link> fps,
                                                         <link linkend="GSourceFunc">GSourceFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Simple wrapper around <link linkend="clutter-frame-source-add-full"><function>clutter_frame_source_add_full()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>fps</parameter>&#160;:</term>
<listitem><simpara> the number of times per second to call the function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> function to call
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> data to pass to the function
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the ID (greater than 0) of the event source.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>
<refsect2 id="clutter-frame-source-add-full" role="function" condition="since:0.8">
<title>clutter_frame_source_add_full ()</title>
<indexterm zone="clutter-frame-source-add-full" role="0.8"><primary sortas="frame_source_add_full">clutter_frame_source_add_full</primary></indexterm><programlisting><link linkend="guint">guint</link>               clutter_frame_source_add_full       (<link linkend="gint">gint</link> priority,
                                                         <link linkend="guint">guint</link> fps,
                                                         <link linkend="GSourceFunc">GSourceFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> notify);</programlisting>
<para>
Sets a function to be called at regular intervals with the given
priority.  The function is called repeatedly until it returns
<link linkend="FALSE--CAPS"><literal>FALSE</literal></link>, at which point the timeout is automatically destroyed and
the function will not be called again.  The <parameter>notify</parameter> function is
called when the timeout is destroyed.  The first call to the
function will be at the end of the first <parameter>interval</parameter>.
</para>
<para>
This function is similar to <link linkend="g-timeout-add-full"><function>g_timeout_add_full()</function></link> except that it
will try to compensate for delays. For example, if <parameter>func</parameter> takes half
the interval time to execute then the function will be called again
half the interval time after it finished. In contrast
<link linkend="g-timeout-add-full"><function>g_timeout_add_full()</function></link> would not fire until a full interval after the
function completes so the delay between calls would be 1.0 / <parameter>fps</parameter> *
1.5. This function does not however try to invoke the function
multiple times to catch up missing frames if <parameter>func</parameter> takes more than
<parameter>interval</parameter> ms to execute.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>priority</parameter>&#160;:</term>
<listitem><simpara> the priority of the frame source. Typically this will be in the
           range between <link linkend="G-PRIORITY-DEFAULT--CAPS"><type>G_PRIORITY_DEFAULT</type></link> and <link linkend="G-PRIORITY-HIGH--CAPS"><type>G_PRIORITY_HIGH</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fps</parameter>&#160;:</term>
<listitem><simpara> the number of times per second to call the function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> function to call
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> data to pass to the function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>notify</parameter>&#160;:</term>
<listitem><simpara> function to call when the timeout source is removed
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the ID (greater than 0) of the event source.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>
<refsect2 id="ClutterParamSpecFixed" role="struct" condition="since:0.8">
<title>ClutterParamSpecFixed</title>
<indexterm zone="ClutterParamSpecFixed" role="0.8"><primary sortas="ParamSpecFixed">ClutterParamSpecFixed</primary></indexterm><programlisting>typedef struct {
  CoglFixed minimum;
  CoglFixed maximum;
  CoglFixed default_value;
} ClutterParamSpecFixed;
</programlisting>
<para>
<link linkend="GParamSpec"><type>GParamSpec</type></link> subclass for fixed point based properties</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="CoglFixed">CoglFixed</link>&#160;<structfield>minimum</structfield>;</term>
<listitem><simpara> lower boundary
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="CoglFixed">CoglFixed</link>&#160;<structfield>maximum</structfield>;</term>
<listitem><simpara> higher boundary
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="CoglFixed">CoglFixed</link>&#160;<structfield>default_value</structfield>;</term>
<listitem><simpara> default value
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>
<refsect2 id="clutter-param-spec-fixed" role="function" condition="since:0.8">
<title>clutter_param_spec_fixed ()</title>
<indexterm zone="clutter-param-spec-fixed" role="0.8"><primary sortas="param_spec_fixed">clutter_param_spec_fixed</primary></indexterm><programlisting><link linkend="GParamSpec">GParamSpec</link> *        clutter_param_spec_fixed            (const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *nick,
                                                         const <link linkend="gchar">gchar</link> *blurb,
                                                         <link linkend="CoglFixed">CoglFixed</link> minimum,
                                                         <link linkend="CoglFixed">CoglFixed</link> maximum,
                                                         <link linkend="CoglFixed">CoglFixed</link> default_value,
                                                         <link linkend="GParamFlags">GParamFlags</link> flags);</programlisting>
<para>
Creates a <link linkend="GParamSpec"><type>GParamSpec</type></link> for properties using <link linkend="CoglFixed"><type>CoglFixed</type></link> values</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> name of the property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nick</parameter>&#160;:</term>
<listitem><simpara> short name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>blurb</parameter>&#160;:</term>
<listitem><simpara> description (can be translatable)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>minimum</parameter>&#160;:</term>
<listitem><simpara> lower boundary
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>maximum</parameter>&#160;:</term>
<listitem><simpara> higher boundary
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>default_value</parameter>&#160;:</term>
<listitem><simpara> default value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> flags for the param spec
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the newly created <link linkend="GParamSpec"><type>GParamSpec</type></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>
<refsect2 id="CLUTTER-VALUE-HOLDS-FIXED--CAPS" role="macro" condition="since:0.8">
<title>CLUTTER_VALUE_HOLDS_FIXED()</title>
<indexterm zone="CLUTTER-VALUE-HOLDS-FIXED--CAPS" role="0.8"><primary sortas="VALUE_HOLDS_FIXED">CLUTTER_VALUE_HOLDS_FIXED</primary></indexterm><programlisting>#define CLUTTER_VALUE_HOLDS_FIXED(x)    (G_VALUE_HOLDS ((x), COGL_TYPE_FIXED))
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>x</parameter> holds a <link linkend="CoglFixed"><type>CoglFixed</type></link>   .</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>
<refsect2 id="clutter-value-set-fixed" role="function" condition="since:0.8">
<title>clutter_value_set_fixed ()</title>
<indexterm zone="clutter-value-set-fixed" role="0.8"><primary sortas="value_set_fixed">clutter_value_set_fixed</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_value_set_fixed             (<link linkend="GValue">GValue</link> *value,
                                                         <link linkend="CoglFixed">CoglFixed</link> fixed_);</programlisting>
<para>
Sets <parameter>value</parameter> to <parameter>fixed_</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GValue"><type>GValue</type></link> initialized to <link linkend="COGL-TYPE-FIXED--CAPS"><literal>COGL_TYPE_FIXED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fixed_</parameter>&#160;:</term>
<listitem><simpara> the fixed point value to set
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>
<refsect2 id="clutter-value-get-fixed" role="function" condition="since:0.8">
<title>clutter_value_get_fixed ()</title>
<indexterm zone="clutter-value-get-fixed" role="0.8"><primary sortas="value_get_fixed">clutter_value_get_fixed</primary></indexterm><programlisting><link linkend="CoglFixed">CoglFixed</link>           clutter_value_get_fixed             (const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Gets the fixed point value stored inside <parameter>value</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GValue"><type>GValue</type></link> initialized to <link linkend="COGL-TYPE-FIXED--CAPS"><literal>COGL_TYPE_FIXED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the value inside the passed <link linkend="GValue"><type>GValue</type></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>

</refsect1>




</refentry>
