<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version "1.0.6">
]>

<refentry id="ClutterBehaviourPath">
<refmeta>
<refentrytitle role="top_of_page" id="ClutterBehaviourPath.top_of_page">ClutterBehaviourPath</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>CLUTTER Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ClutterBehaviourPath</refname>
<refpurpose>A behaviour for moving actors along a <link linkend="ClutterPath"><type>ClutterPath</type></link></refpurpose>
</refnamediv>

<refsynopsisdiv id="ClutterBehaviourPath.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="ClutterBehaviourPath-struct">ClutterBehaviourPath</link>;
                    <link linkend="ClutterBehaviourPathClass">ClutterBehaviourPathClass</link>;
<link linkend="ClutterBehaviour">ClutterBehaviour</link> *  <link linkend="clutter-behaviour-path-new">clutter_behaviour_path_new</link>          (<link linkend="ClutterAlpha">ClutterAlpha</link> *alpha,
                                                         <link linkend="ClutterPath">ClutterPath</link> *path);
<link linkend="ClutterBehaviour">ClutterBehaviour</link> *  <link linkend="clutter-behaviour-path-new-with-description">clutter_behaviour_path_new_with_description</link>
                                                        (<link linkend="ClutterAlpha">ClutterAlpha</link> *alpha,
                                                         const <link linkend="gchar">gchar</link> *desc);
<link linkend="ClutterBehaviour">ClutterBehaviour</link> *  <link linkend="clutter-behaviour-path-new-with-knots">clutter_behaviour_path_new_with_knots</link>
                                                        (<link linkend="ClutterAlpha">ClutterAlpha</link> *alpha,
                                                         const <link linkend="ClutterKnot">ClutterKnot</link> *knots,
                                                         <link linkend="guint">guint</link> n_knots);
<link linkend="void">void</link>                <link linkend="clutter-behaviour-path-set-path">clutter_behaviour_path_set_path</link>     (<link linkend="ClutterBehaviourPath">ClutterBehaviourPath</link> *pathb,
                                                         <link linkend="ClutterPath">ClutterPath</link> *path);
<link linkend="ClutterPath">ClutterPath</link> *       <link linkend="clutter-behaviour-path-get-path">clutter_behaviour_path_get_path</link>     (<link linkend="ClutterBehaviourPath">ClutterBehaviourPath</link> *pathb);

                    <link linkend="ClutterKnot">ClutterKnot</link>;
<link linkend="ClutterKnot">ClutterKnot</link> *       <link linkend="clutter-knot-copy">clutter_knot_copy</link>                   (const <link linkend="ClutterKnot">ClutterKnot</link> *knot);
<link linkend="void">void</link>                <link linkend="clutter-knot-free">clutter_knot_free</link>                   (<link linkend="ClutterKnot">ClutterKnot</link> *knot);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-knot-equal">clutter_knot_equal</link>                  (const <link linkend="ClutterKnot">ClutterKnot</link> *knot_a,
                                                         const <link linkend="ClutterKnot">ClutterKnot</link> *knot_b);
</synopsis>
</refsynopsisdiv>

<refsect1 id="ClutterBehaviourPath.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="ClutterBehaviour">ClutterBehaviour</link>
         +----ClutterBehaviourPath
</synopsis>
</refsect1>



<refsect1 id="ClutterBehaviourPath.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
ClutterBehaviourPath implements
 <link linkend="ClutterScriptable">ClutterScriptable</link>.</para>
</refsect1>


<refsect1 id="ClutterBehaviourPath.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="ClutterBehaviourPath--path">path</link>&quot;                     <link linkend="ClutterPath">ClutterPath</link>*          : Read / Write
</synopsis>
</refsect1>

<refsect1 id="ClutterBehaviourPath.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="ClutterBehaviourPath-knot-reached">knot-reached</link>&quot;                                   : Run Last
</synopsis>
</refsect1>


<refsect1 id="ClutterBehaviourPath.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="ClutterBehaviourPath"><type>ClutterBehaviourPath</type></link> interpolates actors along a defined path.
</para>
<para>
A path is described by a <link linkend="ClutterPath"><type>ClutterPath</type></link> object. The path can contain
straight line parts and bezier curves. If the path contains
<link linkend="CLUTTER-PATH-MOVE-TO--CAPS"><literal>CLUTTER_PATH_MOVE_TO</literal></link> parts then the actors will jump to those
coordinates. This can be used make disjoint paths.
</para>
<para>
When creating a path behaviour in a <link linkend="ClutterScript"><type>ClutterScript</type></link>, you can specify
the path property directly as a string. For example:
</para>
<para>
<informalexample><programlisting>
{
  "id"     : "spline-path",
  "type"   : "ClutterBehaviourPath",
  "path"   : "M 50 50 L 100 100",
  "alpha"  : {
     "timeline" : "main-timeline",
     "function" : "ramp
   }
}
</programlisting></informalexample>
</para>
<para>
<note>If the alpha function is a periodic function, i.e. it returns to
0 after reaching <link linkend="CLUTTER-ALPHA-MAX-ALPHA--CAPS"><literal>CLUTTER_ALPHA_MAX_ALPHA</literal></link>, then the actors will walk
the path back to the starting <link linkend="ClutterKnot"><type>ClutterKnot</type></link>.</note>
</para>
<para>
<link linkend="ClutterBehaviourPath"><type>ClutterBehaviourPath</type></link> is available since Clutter 0.2</para>
<para>
</para>
</refsect1>

<refsect1 id="ClutterBehaviourPath.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="ClutterBehaviourPath-struct" role="struct">
<title>ClutterBehaviourPath</title>
<indexterm zone="ClutterBehaviourPath-struct" role="0.2"><primary sortas="BehaviourPath">ClutterBehaviourPath</primary></indexterm><programlisting>typedef struct _ClutterBehaviourPath ClutterBehaviourPath;</programlisting>
<para>
The <link linkend="ClutterBehaviourPath"><type>ClutterBehaviourPath</type></link> structure contains only private data
and should be accessed using the provided API</para>
<para>
</para><para role="since">Since 0.2</para></refsect2>
<refsect2 id="ClutterBehaviourPathClass" role="struct">
<title>ClutterBehaviourPathClass</title>
<indexterm zone="ClutterBehaviourPathClass"><primary sortas="BehaviourPathClass">ClutterBehaviourPathClass</primary></indexterm><programlisting>typedef struct {
  void (*knot_reached) (ClutterBehaviourPath *pathb,
                        guint                 knot_num);
} ClutterBehaviourPathClass;
</programlisting>
<para>
The <link linkend="ClutterBehaviourPathClass"><type>ClutterBehaviourPathClass</type></link> struct contains only private data
</para>
<para>
Since 0.2</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><structfield>knot_reached</structfield>&#160;()</term>
<listitem><simpara> signal class handler for the
  ClutterBehaviourPath::knot_reached signal
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-behaviour-path-new" role="function" condition="since:0.2">
<title>clutter_behaviour_path_new ()</title>
<indexterm zone="clutter-behaviour-path-new" role="0.2"><primary sortas="behaviour_path_new">clutter_behaviour_path_new</primary></indexterm><programlisting><link linkend="ClutterBehaviour">ClutterBehaviour</link> *  clutter_behaviour_path_new          (<link linkend="ClutterAlpha">ClutterAlpha</link> *alpha,
                                                         <link linkend="ClutterPath">ClutterPath</link> *path);</programlisting>
<para>
Creates a new path behaviour. You can use this behaviour to drive
actors along the nodes of a path, described by <parameter>path</parameter>.
</para>
<para>
This will claim the floating reference on the <link linkend="ClutterPath"><type>ClutterPath</type></link> so you
do not need to unref if it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alpha</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterAlpha"><type>ClutterAlpha</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterPath"><type>ClutterPath</type></link> or <link linkend="NULL--CAPS"><literal>NULL</literal></link> for an empty path
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="ClutterBehaviour"><type>ClutterBehaviour</type></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2</para></refsect2>
<refsect2 id="clutter-behaviour-path-new-with-description" role="function" condition="since:1.0">
<title>clutter_behaviour_path_new_with_description ()</title>
<indexterm zone="clutter-behaviour-path-new-with-description" role="1.0"><primary sortas="behaviour_path_new_with_description">clutter_behaviour_path_new_with_description</primary></indexterm><programlisting><link linkend="ClutterBehaviour">ClutterBehaviour</link> *  clutter_behaviour_path_new_with_description
                                                        (<link linkend="ClutterAlpha">ClutterAlpha</link> *alpha,
                                                         const <link linkend="gchar">gchar</link> *desc);</programlisting>
<para>
Creates a new path behaviour using the path described by <parameter>desc</parameter>. See
<link linkend="clutter-path-add-string"><function>clutter_path_add_string()</function></link> for a description of the format.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alpha</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterAlpha"><type>ClutterAlpha</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&#160;:</term>
<listitem><simpara> a string description of the path
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="ClutterBehaviour"><type>ClutterBehaviour</type></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="clutter-behaviour-path-new-with-knots" role="function" condition="since:1.0">
<title>clutter_behaviour_path_new_with_knots ()</title>
<indexterm zone="clutter-behaviour-path-new-with-knots" role="1.0"><primary sortas="behaviour_path_new_with_knots">clutter_behaviour_path_new_with_knots</primary></indexterm><programlisting><link linkend="ClutterBehaviour">ClutterBehaviour</link> *  clutter_behaviour_path_new_with_knots
                                                        (<link linkend="ClutterAlpha">ClutterAlpha</link> *alpha,
                                                         const <link linkend="ClutterKnot">ClutterKnot</link> *knots,
                                                         <link linkend="guint">guint</link> n_knots);</programlisting>
<para>
Creates a new path behaviour that will make the actors visit all of
the given knots in order with straight lines in between.
</para>
<para>
A path will be created where the first knot is used in a
<link linkend="CLUTTER-PATH-MOVE-TO--CAPS"><literal>CLUTTER_PATH_MOVE_TO</literal></link> and the subsequent knots are used in
<link linkend="CLUTTER-PATH-LINE-TO--CAPS"><literal>CLUTTER_PATH_LINE_TO</literal></link><!-- -->s.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alpha</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterAlpha"><type>ClutterAlpha</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>knots</parameter>&#160;:</term>
<listitem><simpara> an array of <link linkend="ClutterKnot"><type>ClutterKnot</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_knots</parameter>&#160;:</term>
<listitem><simpara> number of entries in <parameter>knots</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="ClutterBehaviour"><type>ClutterBehaviour</type></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="clutter-behaviour-path-set-path" role="function" condition="since:1.0">
<title>clutter_behaviour_path_set_path ()</title>
<indexterm zone="clutter-behaviour-path-set-path" role="1.0"><primary sortas="behaviour_path_set_path">clutter_behaviour_path_set_path</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_behaviour_path_set_path     (<link linkend="ClutterBehaviourPath">ClutterBehaviourPath</link> *pathb,
                                                         <link linkend="ClutterPath">ClutterPath</link> *path);</programlisting>
<para>
Change the path that the actors will follow. This will take the
floating reference on the <link linkend="ClutterPath"><type>ClutterPath</type></link> so you do not need to unref
it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pathb</parameter>&#160;:</term>
<listitem><simpara> the path behaviour
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the new path to follow
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="clutter-behaviour-path-get-path" role="function" condition="since:1.0">
<title>clutter_behaviour_path_get_path ()</title>
<indexterm zone="clutter-behaviour-path-get-path" role="1.0"><primary sortas="behaviour_path_get_path">clutter_behaviour_path_get_path</primary></indexterm><programlisting><link linkend="ClutterPath">ClutterPath</link> *       clutter_behaviour_path_get_path     (<link linkend="ClutterBehaviourPath">ClutterBehaviourPath</link> *pathb);</programlisting>
<para>
Get the current path of the behaviour</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pathb</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterBehaviourPath"><type>ClutterBehaviourPath</type></link> instance
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the path. <acronym>transfer</acronym> none. </simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="ClutterKnot" role="struct" condition="since:0.2">
<title>ClutterKnot</title>
<indexterm zone="ClutterKnot" role="0.2"><primary sortas="Knot">ClutterKnot</primary></indexterm><programlisting>typedef struct {
  gint x;
  gint y;
} ClutterKnot;
</programlisting>
<para>
Point in a path behaviour.</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gint">gint</link>&#160;<structfield>x</structfield>;</term>
<listitem><simpara> X coordinate of the knot
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&#160;<structfield>y</structfield>;</term>
<listitem><simpara> Y coordinate of the knot
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.2</para></refsect2>
<refsect2 id="clutter-knot-copy" role="function" condition="since:0.2">
<title>clutter_knot_copy ()</title>
<indexterm zone="clutter-knot-copy" role="0.2"><primary sortas="knot_copy">clutter_knot_copy</primary></indexterm><programlisting><link linkend="ClutterKnot">ClutterKnot</link> *       clutter_knot_copy                   (const <link linkend="ClutterKnot">ClutterKnot</link> *knot);</programlisting>
<para>
Makes an allocated copy of a knot.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>knot</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterKnot"><type>ClutterKnot</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the copied knot.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2</para></refsect2>
<refsect2 id="clutter-knot-free" role="function" condition="since:0.2">
<title>clutter_knot_free ()</title>
<indexterm zone="clutter-knot-free" role="0.2"><primary sortas="knot_free">clutter_knot_free</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_knot_free                   (<link linkend="ClutterKnot">ClutterKnot</link> *knot);</programlisting>
<para>
Frees the memory of an allocated knot.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>knot</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterKnot"><type>ClutterKnot</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2</para></refsect2>
<refsect2 id="clutter-knot-equal" role="function" condition="since:0.2">
<title>clutter_knot_equal ()</title>
<indexterm zone="clutter-knot-equal" role="0.2"><primary sortas="knot_equal">clutter_knot_equal</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_knot_equal                  (const <link linkend="ClutterKnot">ClutterKnot</link> *knot_a,
                                                         const <link linkend="ClutterKnot">ClutterKnot</link> *knot_b);</programlisting>
<para>
Compares to knot and checks if the point to the same location.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>knot_a</parameter>&#160;:</term>
<listitem><simpara> First knot
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>knot_b</parameter>&#160;:</term>
<listitem><simpara> Second knot
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the knots point to the same location.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2</para></refsect2>

</refsect1>
<refsect1 id="ClutterBehaviourPath.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="ClutterBehaviourPath--path" role="property"><title>The <literal>&quot;path&quot;</literal> property</title>
<indexterm zone="ClutterBehaviourPath--path"><primary sortas="BehaviourPath:path">ClutterBehaviourPath:path</primary></indexterm><programlisting>  &quot;path&quot;                     <link linkend="ClutterPath">ClutterPath</link>*          : Read / Write</programlisting>
<para>The ClutterPath object representing the path to animate along.</para></refsect2>
</refsect1>

<refsect1 id="ClutterBehaviourPath.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="ClutterBehaviourPath-knot-reached" role="signal"><title>The <literal>&quot;knot-reached&quot;</literal> signal</title>
<indexterm zone="ClutterBehaviourPath-knot-reached" role="0.2"><primary sortas="BehaviourPath::knot-reached">ClutterBehaviourPath::knot-reached</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterBehaviourPath">ClutterBehaviourPath</link> *pathb,
                                                        <link linkend="guint">guint</link>                 knot_num,
                                                        <link linkend="gpointer">gpointer</link>              user_data)      : Run Last</programlisting>
<para>
This signal is emitted each time a node defined inside the path
is reached.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pathb</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>knot_num</parameter>&#160;:</term>
<listitem><simpara> the index of the <link linkend="ClutterPathKnot"><type>ClutterPathKnot</type></link> reached
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 0.2</para></refsect2>
</refsect1>



</refentry>
