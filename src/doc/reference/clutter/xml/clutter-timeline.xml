<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version "1.0.6">
]>

<refentry id="ClutterTimeline">
<refmeta>
<refentrytitle role="top_of_page" id="ClutterTimeline.top_of_page">ClutterTimeline</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>CLUTTER Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ClutterTimeline</refname>
<refpurpose>A class for time-based events</refpurpose>
</refnamediv>

<refsynopsisdiv id="ClutterTimeline.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="ClutterTimeline-struct">ClutterTimeline</link>;
                    <link linkend="ClutterTimelineClass">ClutterTimelineClass</link>;
<link linkend="ClutterTimeline">ClutterTimeline</link> *   <link linkend="clutter-timeline-new">clutter_timeline_new</link>                (<link linkend="guint">guint</link> msecs);
<link linkend="ClutterTimeline">ClutterTimeline</link> *   <link linkend="clutter-timeline-clone">clutter_timeline_clone</link>              (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);

<link linkend="void">void</link>                <link linkend="clutter-timeline-set-duration">clutter_timeline_set_duration</link>       (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="guint">guint</link> msecs);
<link linkend="guint">guint</link>               <link linkend="clutter-timeline-get-duration">clutter_timeline_get_duration</link>       (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);
<link linkend="void">void</link>                <link linkend="clutter-timeline-set-loop">clutter_timeline_set_loop</link>           (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="gboolean">gboolean</link> loop);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-timeline-get-loop">clutter_timeline_get_loop</link>           (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);
<link linkend="void">void</link>                <link linkend="clutter-timeline-set-delay">clutter_timeline_set_delay</link>          (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="guint">guint</link> msecs);
<link linkend="guint">guint</link>               <link linkend="clutter-timeline-get-delay">clutter_timeline_get_delay</link>          (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);
enum                <link linkend="ClutterTimelineDirection">ClutterTimelineDirection</link>;
<link linkend="void">void</link>                <link linkend="clutter-timeline-set-direction">clutter_timeline_set_direction</link>      (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="ClutterTimelineDirection">ClutterTimelineDirection</link> direction);
<link linkend="ClutterTimelineDirection">ClutterTimelineDirection</link>  <link linkend="clutter-timeline-get-direction">clutter_timeline_get_direction</link>
                                                        (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);

<link linkend="void">void</link>                <link linkend="clutter-timeline-start">clutter_timeline_start</link>              (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);
<link linkend="void">void</link>                <link linkend="clutter-timeline-pause">clutter_timeline_pause</link>              (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);
<link linkend="void">void</link>                <link linkend="clutter-timeline-stop">clutter_timeline_stop</link>               (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);
<link linkend="void">void</link>                <link linkend="clutter-timeline-rewind">clutter_timeline_rewind</link>             (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);
<link linkend="void">void</link>                <link linkend="clutter-timeline-skip">clutter_timeline_skip</link>               (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="guint">guint</link> msecs);
<link linkend="void">void</link>                <link linkend="clutter-timeline-advance">clutter_timeline_advance</link>            (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="guint">guint</link> msecs);
<link linkend="guint">guint</link>               <link linkend="clutter-timeline-get-elapsed-time">clutter_timeline_get_elapsed_time</link>   (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);
<link linkend="guint">guint</link>               <link linkend="clutter-timeline-get-delta">clutter_timeline_get_delta</link>          (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);
<link linkend="gdouble">gdouble</link>             <link linkend="clutter-timeline-get-progress">clutter_timeline_get_progress</link>       (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-timeline-is-playing">clutter_timeline_is_playing</link>         (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);

<link linkend="void">void</link>                <link linkend="clutter-timeline-add-marker-at-time">clutter_timeline_add_marker_at_time</link> (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         const <link linkend="gchar">gchar</link> *marker_name,
                                                         <link linkend="guint">guint</link> msecs);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-timeline-has-marker">clutter_timeline_has_marker</link>         (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         const <link linkend="gchar">gchar</link> *marker_name);
<link linkend="gchar">gchar</link> **            <link linkend="clutter-timeline-list-markers">clutter_timeline_list_markers</link>       (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="gint">gint</link> msecs,
                                                         <link linkend="gsize">gsize</link> *n_markers);
<link linkend="void">void</link>                <link linkend="clutter-timeline-remove-marker">clutter_timeline_remove_marker</link>      (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         const <link linkend="gchar">gchar</link> *marker_name);
<link linkend="void">void</link>                <link linkend="clutter-timeline-advance-to-marker">clutter_timeline_advance_to_marker</link>  (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         const <link linkend="gchar">gchar</link> *marker_name);
</synopsis>
</refsynopsisdiv>

<refsect1 id="ClutterTimeline.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----ClutterTimeline
</synopsis>
</refsect1>





<refsect1 id="ClutterTimeline.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="ClutterTimeline--delay">delay</link>&quot;                    <link linkend="guint">guint</link>                 : Read / Write
  &quot;<link linkend="ClutterTimeline--direction">direction</link>&quot;                <link linkend="ClutterTimelineDirection">ClutterTimelineDirection</link>  : Read / Write
  &quot;<link linkend="ClutterTimeline--duration">duration</link>&quot;                 <link linkend="guint">guint</link>                 : Read / Write
  &quot;<link linkend="ClutterTimeline--loop">loop</link>&quot;                     <link linkend="gboolean">gboolean</link>              : Read / Write
</synopsis>
</refsect1>

<refsect1 id="ClutterTimeline.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="ClutterTimeline-completed">completed</link>&quot;                                      : Run Last
  &quot;<link linkend="ClutterTimeline-marker-reached">marker-reached</link>&quot;                                 : Run Last / No Recursion / Has Details / No Hooks
  &quot;<link linkend="ClutterTimeline-new-frame">new-frame</link>&quot;                                      : Run Last
  &quot;<link linkend="ClutterTimeline-paused">paused</link>&quot;                                         : Run Last
  &quot;<link linkend="ClutterTimeline-started">started</link>&quot;                                        : Run Last
</synopsis>
</refsect1>


<refsect1 id="ClutterTimeline.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> is a base class for managing time based events such
as animations.</para>
<para>
</para>
</refsect1>

<refsect1 id="ClutterTimeline.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="ClutterTimeline-struct" role="struct">
<title>ClutterTimeline</title>
<indexterm zone="ClutterTimeline-struct" role="0.2"><primary sortas="Timeline">ClutterTimeline</primary></indexterm><programlisting>typedef struct _ClutterTimeline ClutterTimeline;</programlisting>
<para>
The <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> structure contains only private data
and should be accessed using the provided API</para>
<para>
</para><para role="since">Since 0.2</para></refsect2>
<refsect2 id="ClutterTimelineClass" role="struct" condition="since:0.2">
<title>ClutterTimelineClass</title>
<indexterm zone="ClutterTimelineClass" role="0.2"><primary sortas="TimelineClass">ClutterTimelineClass</primary></indexterm><programlisting>typedef struct {
  void (*started)        (ClutterTimeline *timeline);
  void (*completed)      (ClutterTimeline *timeline);
  void (*paused)         (ClutterTimeline *timeline);
  
  void (*new_frame)      (ClutterTimeline *timeline,
		          gint             frame_num);

  void (*marker_reached) (ClutterTimeline *timeline,
                          const gchar     *marker_name,
                          gint             frame_num);
} ClutterTimelineClass;
</programlisting>
<para>
The <link linkend="ClutterTimelineClass"><type>ClutterTimelineClass</type></link> structure contains only private data</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><structfield>started</structfield>&#160;()</term>
<listitem><simpara> handler for the <link linkend="ClutterTimeline-started"><type>"started"</type></link> signal
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>completed</structfield>&#160;()</term>
<listitem><simpara> handler for the <link linkend="ClutterTimeline-completed"><type>"completed"</type></link> signal
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>paused</structfield>&#160;()</term>
<listitem><simpara> handler for the <link linkend="ClutterTimeline-paused"><type>"paused"</type></link> signal
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>new_frame</structfield>&#160;()</term>
<listitem><simpara> handler for the <link linkend="ClutterTimeline-new-frame"><type>"new-frame"</type></link> signal
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>marker_reached</structfield>&#160;()</term>
<listitem><simpara> handler for the <link linkend="ClutterTimeline-marker-reached"><type>"marker-reached"</type></link> signal
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.2</para></refsect2>
<refsect2 id="clutter-timeline-new" role="function" condition="since:0.6">
<title>clutter_timeline_new ()</title>
<indexterm zone="clutter-timeline-new" role="0.6"><primary sortas="timeline_new">clutter_timeline_new</primary></indexterm><programlisting><link linkend="ClutterTimeline">ClutterTimeline</link> *   clutter_timeline_new                (<link linkend="guint">guint</link> msecs);</programlisting>
<para>
Creates a new <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> with a duration of <parameter>msecs</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>msecs</parameter>&#160;:</term>
<listitem><simpara> Duration of the timeline in milliseconds
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the newly created <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> instance. Use
  <link linkend="g-object-unref"><function>g_object_unref()</function></link> when done using it

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.6</para></refsect2>
<refsect2 id="clutter-timeline-clone" role="function" condition="since:0.4">
<title>clutter_timeline_clone ()</title>
<indexterm zone="clutter-timeline-clone" role="0.4"><primary sortas="timeline_clone">clutter_timeline_clone</primary></indexterm><programlisting><link linkend="ClutterTimeline">ClutterTimeline</link> *   clutter_timeline_clone              (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Create a new <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> instance which has property values
matching that of supplied timeline. The cloned timeline will not
be started and will not be positioned to the current position of
<parameter>timeline</parameter>: you will have to start it with <link linkend="clutter-timeline-start"><function>clutter_timeline_start()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> to duplicate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>, cloned from <parameter>timeline</parameter>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.4</para></refsect2>
<refsect2 id="clutter-timeline-set-duration" role="function" condition="since:0.6">
<title>clutter_timeline_set_duration ()</title>
<indexterm zone="clutter-timeline-set-duration" role="0.6"><primary sortas="timeline_set_duration">clutter_timeline_set_duration</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_set_duration       (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="guint">guint</link> msecs);</programlisting>
<para>
Sets the duration of the timeline, in milliseconds. The speed
of the timeline depends on the ClutterTimeline:fps setting.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msecs</parameter>&#160;:</term>
<listitem><simpara> duration of the timeline in milliseconds
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.6</para></refsect2>
<refsect2 id="clutter-timeline-get-duration" role="function" condition="since:0.6">
<title>clutter_timeline_get_duration ()</title>
<indexterm zone="clutter-timeline-get-duration" role="0.6"><primary sortas="timeline_get_duration">clutter_timeline_get_duration</primary></indexterm><programlisting><link linkend="guint">guint</link>               clutter_timeline_get_duration       (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Retrieves the duration of a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> in milliseconds.
See <link linkend="clutter-timeline-set-duration"><function>clutter_timeline_set_duration()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the duration of the timeline, in milliseconds.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.6</para></refsect2>
<refsect2 id="clutter-timeline-set-loop" role="function">
<title>clutter_timeline_set_loop ()</title>
<indexterm zone="clutter-timeline-set-loop"><primary sortas="timeline_set_loop">clutter_timeline_set_loop</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_set_loop           (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="gboolean">gboolean</link> loop);</programlisting>
<para>
Sets whether <parameter>timeline</parameter> should loop.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> for enable looping
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-timeline-get-loop" role="function">
<title>clutter_timeline_get_loop ()</title>
<indexterm zone="clutter-timeline-get-loop"><primary sortas="timeline_get_loop">clutter_timeline_get_loop</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_timeline_get_loop           (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Gets whether <parameter>timeline</parameter> is looping</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the timeline is looping
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-timeline-set-delay" role="function" condition="since:0.4">
<title>clutter_timeline_set_delay ()</title>
<indexterm zone="clutter-timeline-set-delay" role="0.4"><primary sortas="timeline_set_delay">clutter_timeline_set_delay</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_set_delay          (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="guint">guint</link> msecs);</programlisting>
<para>
Sets the delay, in milliseconds, before <parameter>timeline</parameter> should start.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msecs</parameter>&#160;:</term>
<listitem><simpara> delay in milliseconds
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.4</para></refsect2>
<refsect2 id="clutter-timeline-get-delay" role="function" condition="since:0.4">
<title>clutter_timeline_get_delay ()</title>
<indexterm zone="clutter-timeline-get-delay" role="0.4"><primary sortas="timeline_get_delay">clutter_timeline_get_delay</primary></indexterm><programlisting><link linkend="guint">guint</link>               clutter_timeline_get_delay          (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Retrieves the delay set using <link linkend="clutter-timeline-set-delay"><function>clutter_timeline_set_delay()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the delay in milliseconds.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.4</para></refsect2>
<refsect2 id="ClutterTimelineDirection" role="enum" condition="since:0.6">
<title>enum ClutterTimelineDirection</title>
<indexterm zone="ClutterTimelineDirection" role="0.6"><primary sortas="TimelineDirection">ClutterTimelineDirection</primary></indexterm><programlisting>typedef enum {
  CLUTTER_TIMELINE_FORWARD,
  CLUTTER_TIMELINE_BACKWARD
} ClutterTimelineDirection;
</programlisting>
<para>
The direction of a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link></para>
<para>
</para><variablelist role="enum">
<varlistentry id="CLUTTER-TIMELINE-FORWARD--CAPS" role="constant">
<term><literal>CLUTTER_TIMELINE_FORWARD</literal></term>
<listitem><simpara> forward direction for a timeline
</simpara></listitem>
</varlistentry>
<varlistentry id="CLUTTER-TIMELINE-BACKWARD--CAPS" role="constant">
<term><literal>CLUTTER_TIMELINE_BACKWARD</literal></term>
<listitem><simpara> backward direction for a timeline
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.6</para></refsect2>
<refsect2 id="clutter-timeline-set-direction" role="function" condition="since:0.6">
<title>clutter_timeline_set_direction ()</title>
<indexterm zone="clutter-timeline-set-direction" role="0.6"><primary sortas="timeline_set_direction">clutter_timeline_set_direction</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_set_direction      (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="ClutterTimelineDirection">ClutterTimelineDirection</link> direction);</programlisting>
<para>
Sets the direction of <parameter>timeline</parameter>, either <link linkend="CLUTTER-TIMELINE-FORWARD--CAPS"><literal>CLUTTER_TIMELINE_FORWARD</literal></link> or
<link linkend="CLUTTER-TIMELINE-BACKWARD--CAPS"><literal>CLUTTER_TIMELINE_BACKWARD</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>direction</parameter>&#160;:</term>
<listitem><simpara> the direction of the timeline
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.6</para></refsect2>
<refsect2 id="clutter-timeline-get-direction" role="function" condition="since:0.6">
<title>clutter_timeline_get_direction ()</title>
<indexterm zone="clutter-timeline-get-direction" role="0.6"><primary sortas="timeline_get_direction">clutter_timeline_get_direction</primary></indexterm><programlisting><link linkend="ClutterTimelineDirection">ClutterTimelineDirection</link>  clutter_timeline_get_direction
                                                        (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Retrieves the direction of the timeline set with
<link linkend="clutter-timeline-set-direction"><function>clutter_timeline_set_direction()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the direction of the timeline

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.6</para></refsect2>
<refsect2 id="clutter-timeline-start" role="function">
<title>clutter_timeline_start ()</title>
<indexterm zone="clutter-timeline-start"><primary sortas="timeline_start">clutter_timeline_start</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_start              (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Starts the <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> playing.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-timeline-pause" role="function">
<title>clutter_timeline_pause ()</title>
<indexterm zone="clutter-timeline-pause"><primary sortas="timeline_pause">clutter_timeline_pause</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_pause              (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Pauses the <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> on current frame</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-timeline-stop" role="function">
<title>clutter_timeline_stop ()</title>
<indexterm zone="clutter-timeline-stop"><primary sortas="timeline_stop">clutter_timeline_stop</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_stop               (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Stops the <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> and moves to frame 0</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-timeline-rewind" role="function">
<title>clutter_timeline_rewind ()</title>
<indexterm zone="clutter-timeline-rewind"><primary sortas="timeline_rewind">clutter_timeline_rewind</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_rewind             (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Rewinds <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> to the first frame if its direction is
<link linkend="CLUTTER-TIMELINE-FORWARD--CAPS"><literal>CLUTTER_TIMELINE_FORWARD</literal></link> and the last frame if it is
<link linkend="CLUTTER-TIMELINE-BACKWARD--CAPS"><literal>CLUTTER_TIMELINE_BACKWARD</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-timeline-skip" role="function">
<title>clutter_timeline_skip ()</title>
<indexterm zone="clutter-timeline-skip"><primary sortas="timeline_skip">clutter_timeline_skip</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_skip               (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="guint">guint</link> msecs);</programlisting>
<para>
Advance timeline by the requested time in milliseconds</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msecs</parameter>&#160;:</term>
<listitem><simpara> Amount of time to skip
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-timeline-advance" role="function">
<title>clutter_timeline_advance ()</title>
<indexterm zone="clutter-timeline-advance"><primary sortas="timeline_advance">clutter_timeline_advance</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_advance            (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="guint">guint</link> msecs);</programlisting>
<para>
Advance timeline to the requested point. The point is given as a
time in milliseconds since the timeline started.
</para>
<para>
<note><para>The <parameter>timeline</parameter> will not emit the <link linkend="ClutterTimeline-new-frame"><type>"new-frame"</type></link>
signal for the given time. The first ::new-frame signal after the call to
<link linkend="clutter-timeline-advance"><function>clutter_timeline_advance()</function></link> will be emit the skipped markers.
</para></note></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msecs</parameter>&#160;:</term>
<listitem><simpara> Time to advance to
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-timeline-get-elapsed-time" role="function">
<title>clutter_timeline_get_elapsed_time ()</title>
<indexterm zone="clutter-timeline-get-elapsed-time"><primary sortas="timeline_get_elapsed_time">clutter_timeline_get_elapsed_time</primary></indexterm><programlisting><link linkend="guint">guint</link>               clutter_timeline_get_elapsed_time   (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Request the current time position of the timeline.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> current elapsed time in milliseconds.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-timeline-get-delta" role="function" condition="since:0.6">
<title>clutter_timeline_get_delta ()</title>
<indexterm zone="clutter-timeline-get-delta" role="0.6"><primary sortas="timeline_get_delta">clutter_timeline_get_delta</primary></indexterm><programlisting><link linkend="guint">guint</link>               clutter_timeline_get_delta          (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Retrieves the amount of time elapsed since the last
ClutterTimeline::new-frame signal.
</para>
<para>
This function is only useful inside handlers for the ::new-frame
signal, and its behaviour is undefined if the timeline is not
playing.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the amount of time in milliseconds elapsed since the
last frame

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.6</para></refsect2>
<refsect2 id="clutter-timeline-get-progress" role="function" condition="since:0.6">
<title>clutter_timeline_get_progress ()</title>
<indexterm zone="clutter-timeline-get-progress" role="0.6"><primary sortas="timeline_get_progress">clutter_timeline_get_progress</primary></indexterm><programlisting><link linkend="gdouble">gdouble</link>             clutter_timeline_get_progress       (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
The position of the timeline in a [0, 1] interval.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the position of the timeline.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.6</para></refsect2>
<refsect2 id="clutter-timeline-is-playing" role="function">
<title>clutter_timeline_is_playing ()</title>
<indexterm zone="clutter-timeline-is-playing"><primary sortas="timeline_is_playing">clutter_timeline_is_playing</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_timeline_is_playing         (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline);</programlisting>
<para>
Queries state of a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if timeline is currently playing
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-timeline-add-marker-at-time" role="function" condition="since:0.8">
<title>clutter_timeline_add_marker_at_time ()</title>
<indexterm zone="clutter-timeline-add-marker-at-time" role="0.8"><primary sortas="timeline_add_marker_at_time">clutter_timeline_add_marker_at_time</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_add_marker_at_time (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         const <link linkend="gchar">gchar</link> *marker_name,
                                                         <link linkend="guint">guint</link> msecs);</programlisting>
<para>
Adds a named marker that will be hit when the timeline has been
running for <parameter>msecs</parameter> milliseconds. Markers are unique string
identifiers for a given time. Once <parameter>timeline</parameter> reaches
<parameter>msecs</parameter>, it will emit a ::marker-reached signal for each marker
attached to that time.
</para>
<para>
A marker can be removed with <link linkend="clutter-timeline-remove-marker"><function>clutter_timeline_remove_marker()</function></link>. The
timeline can be advanced to a marker using
<link linkend="clutter-timeline-advance-to-marker"><function>clutter_timeline_advance_to_marker()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>marker_name</parameter>&#160;:</term>
<listitem><simpara> the unique name for this marker
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msecs</parameter>&#160;:</term>
<listitem><simpara> position of the marker in milliseconds
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>
<refsect2 id="clutter-timeline-has-marker" role="function" condition="since:0.8">
<title>clutter_timeline_has_marker ()</title>
<indexterm zone="clutter-timeline-has-marker" role="0.8"><primary sortas="timeline_has_marker">clutter_timeline_has_marker</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_timeline_has_marker         (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         const <link linkend="gchar">gchar</link> *marker_name);</programlisting>
<para>
Checks whether <parameter>timeline</parameter> has a marker set with the given name.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>marker_name</parameter>&#160;:</term>
<listitem><simpara> the name of the marker
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the marker was found

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>
<refsect2 id="clutter-timeline-list-markers" role="function" condition="since:0.8">
<title>clutter_timeline_list_markers ()</title>
<indexterm zone="clutter-timeline-list-markers" role="0.8"><primary sortas="timeline_list_markers">clutter_timeline_list_markers</primary></indexterm><programlisting><link linkend="gchar">gchar</link> **            clutter_timeline_list_markers       (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         <link linkend="gint">gint</link> msecs,
                                                         <link linkend="gsize">gsize</link> *n_markers);</programlisting>
<para>
Retrieves the list of markers at time <parameter>msecs</parameter>. If <parameter>frame_num</parameter> is a
negative integer, all the markers attached to <parameter>timeline</parameter> will be
returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msecs</parameter>&#160;:</term>
<listitem><simpara> the time to check, or -1
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_markers</parameter>&#160;:</term>
<listitem><simpara> the number of markers returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>array zero-terminated=1 length=n_markers. <acronym>array zero-terminated=1</acronym> length=n_markers. </simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>
<refsect2 id="clutter-timeline-remove-marker" role="function" condition="since:0.8">
<title>clutter_timeline_remove_marker ()</title>
<indexterm zone="clutter-timeline-remove-marker" role="0.8"><primary sortas="timeline_remove_marker">clutter_timeline_remove_marker</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_remove_marker      (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         const <link linkend="gchar">gchar</link> *marker_name);</programlisting>
<para>
Removes <parameter>marker_name</parameter>, if found, from <parameter>timeline</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>marker_name</parameter>&#160;:</term>
<listitem><simpara> the name of the marker to remove
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>
<refsect2 id="clutter-timeline-advance-to-marker" role="function" condition="since:0.8">
<title>clutter_timeline_advance_to_marker ()</title>
<indexterm zone="clutter-timeline-advance-to-marker" role="0.8"><primary sortas="timeline_advance_to_marker">clutter_timeline_advance_to_marker</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_timeline_advance_to_marker  (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                         const <link linkend="gchar">gchar</link> *marker_name);</programlisting>
<para>
Advances <parameter>timeline</parameter> to the time of the given <parameter>marker_name</parameter>.
</para>
<para>
<note><para>Like <link linkend="clutter-timeline-advance"><function>clutter_timeline_advance()</function></link>, this function will not
emit the <link linkend="ClutterTimeline-new-frame"><type>"new-frame"</type></link> for the time where <parameter>marker_name</parameter>
is set, nor it will emit <link linkend="ClutterTimeline-marker-reached"><type>"marker-reached"</type></link> for
<parameter>marker_name</parameter>.</para></note></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>marker_name</parameter>&#160;:</term>
<listitem><simpara> the name of the marker
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8</para></refsect2>

</refsect1>
<refsect1 id="ClutterTimeline.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="ClutterTimeline--delay" role="property"><title>The <literal>&quot;delay&quot;</literal> property</title>
<indexterm zone="ClutterTimeline--delay" role="0.4"><primary sortas="Timeline:delay">ClutterTimeline:delay</primary></indexterm><programlisting>  &quot;delay&quot;                    <link linkend="guint">guint</link>                 : Read / Write</programlisting>
<para>
A delay, in milliseconds, that should be observed by the
timeline before actually starting.</para>
<para>
</para><para>Default value: 0</para>
<para>Since 0.4</para>
</refsect2>
<refsect2 id="ClutterTimeline--direction" role="property"><title>The <literal>&quot;direction&quot;</literal> property</title>
<indexterm zone="ClutterTimeline--direction" role="0.6"><primary sortas="Timeline:direction">ClutterTimeline:direction</primary></indexterm><programlisting>  &quot;direction&quot;                <link linkend="ClutterTimelineDirection">ClutterTimelineDirection</link>  : Read / Write</programlisting>
<para>
The direction of the timeline, either <link linkend="CLUTTER-TIMELINE-FORWARD--CAPS"><literal>CLUTTER_TIMELINE_FORWARD</literal></link> or
<link linkend="CLUTTER-TIMELINE-BACKWARD--CAPS"><literal>CLUTTER_TIMELINE_BACKWARD</literal></link>.</para>
<para>
</para><para>Default value: CLUTTER_TIMELINE_FORWARD</para>
<para>Since 0.6</para>
</refsect2>
<refsect2 id="ClutterTimeline--duration" role="property"><title>The <literal>&quot;duration&quot;</literal> property</title>
<indexterm zone="ClutterTimeline--duration" role="0.6"><primary sortas="Timeline:duration">ClutterTimeline:duration</primary></indexterm><programlisting>  &quot;duration&quot;                 <link linkend="guint">guint</link>                 : Read / Write</programlisting>
<para>
Duration of the timeline in milliseconds, depending on the
ClutterTimeline:fps value.</para>
<para>
</para><para>Default value: 1000</para>
<para>Since 0.6</para>
</refsect2>
<refsect2 id="ClutterTimeline--loop" role="property"><title>The <literal>&quot;loop&quot;</literal> property</title>
<indexterm zone="ClutterTimeline--loop"><primary sortas="Timeline:loop">ClutterTimeline:loop</primary></indexterm><programlisting>  &quot;loop&quot;                     <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Whether the timeline should automatically rewind and restart.</para>
<para>
</para><para>Default value: FALSE</para>
</refsect2>
</refsect1>

<refsect1 id="ClutterTimeline.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="ClutterTimeline-completed" role="signal"><title>The <literal>&quot;completed&quot;</literal> signal</title>
<indexterm zone="ClutterTimeline-completed"><primary sortas="Timeline::completed">ClutterTimeline::completed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                        <link linkend="gpointer">gpointer</link>         user_data)      : Run Last</programlisting>
<para>
The ::completed signal is emitted when the timeline reaches the
number of frames specified by the ClutterTimeline:num-frames property.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="ClutterTimeline-marker-reached" role="signal"><title>The <literal>&quot;marker-reached&quot;</literal> signal</title>
<indexterm zone="ClutterTimeline-marker-reached" role="0.8"><primary sortas="Timeline::marker-reached">ClutterTimeline::marker-reached</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                        <link linkend="gchar">gchar</link>           *marker_name,
                                                        <link linkend="gint">gint</link>             msecs,
                                                        <link linkend="gpointer">gpointer</link>         user_data)        : Run Last / No Recursion / Has Details / No Hooks</programlisting>
<para>
The ::marker-reached signal is emitted each time a timeline
reaches a marker set with
<link linkend="clutter-timeline-add-marker-at-time"><function>clutter_timeline_add_marker_at_time()</function></link>. This signal is detailed
with the name of the marker as well, so it is possible to connect
a callback to the ::marker-reached signal for a specific marker
with:
</para>
<para>
<informalexample><programlisting>
  clutter_timeline_add_marker_at_time (timeline, "foo", 500);
  clutter_timeline_add_marker_at_time (timeline, "bar", 750);
  g_signal_connect (timeline, "marker-reached",
                    G_CALLBACK (each_marker_reached), NULL);
  g_signal_connect (timeline, "marker-reached::foo",
                    G_CALLBACK (foo_marker_reached), NULL);
  g_signal_connect (timeline, "marker-reached::bar",
                    G_CALLBACK (bar_marker_reached), NULL);
</programlisting></informalexample>
</para>
<para>
In the example, the first callback will be invoked for both
the "foo" and "bar" marker, while the second and third callbacks
will be invoked for the "foo" or "bar" markers, respectively.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>marker_name</parameter>&#160;:</term>
<listitem><simpara> the name of the marker reached
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msecs</parameter>&#160;:</term>
<listitem><simpara> the elapsed time
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 0.8</para></refsect2><refsect2 id="ClutterTimeline-new-frame" role="signal"><title>The <literal>&quot;new-frame&quot;</literal> signal</title>
<indexterm zone="ClutterTimeline-new-frame"><primary sortas="Timeline::new-frame">ClutterTimeline::new-frame</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                        <link linkend="gint">gint</link>             msecs,
                                                        <link linkend="gpointer">gpointer</link>         user_data)      : Run Last</programlisting>
<para>
The ::new-frame signal is emitted for each timeline running
timeline before a new frame is drawn to give animations a chance
to update the scene.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> the timeline which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msecs</parameter>&#160;:</term>
<listitem><simpara> the elapsed time between 0 and duration
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="ClutterTimeline-paused" role="signal"><title>The <literal>&quot;paused&quot;</literal> signal</title>
<indexterm zone="ClutterTimeline-paused"><primary sortas="Timeline::paused">ClutterTimeline::paused</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                        <link linkend="gpointer">gpointer</link>         user_data)      : Run Last</programlisting>
<para>
The ::paused signal is emitted when <link linkend="clutter-timeline-pause"><function>clutter_timeline_pause()</function></link> is invoked.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="ClutterTimeline-started" role="signal"><title>The <literal>&quot;started&quot;</literal> signal</title>
<indexterm zone="ClutterTimeline-started"><primary sortas="Timeline::started">ClutterTimeline::started</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterTimeline">ClutterTimeline</link> *timeline,
                                                        <link linkend="gpointer">gpointer</link>         user_data)      : Run Last</programlisting>
<para>
The ::started signal is emitted when the timeline starts its run.
This might be as soon as <link linkend="clutter-timeline-start"><function>clutter_timeline_start()</function></link> is invoked or
after the delay set in the ClutterTimeline:delay property has
expired.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>timeline</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="ClutterTimeline"><type>ClutterTimeline</type></link> which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
