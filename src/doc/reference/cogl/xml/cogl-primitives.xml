<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version "1.0.6">
]>
<refentry id="cogl-Primitives">
<refmeta>
<refentrytitle role="top_of_page" id="cogl-Primitives.top_of_page">Primitives</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>COGL Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Primitives</refname>
<refpurpose>Functions that draw various primitive shapes and
allow for construction of more complex paths.</refpurpose>
</refnamediv>

<refsynopsisdiv id="cogl-Primitives.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="void">void</link>                <link linkend="cogl-rectangle">cogl_rectangle</link>                      (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2);
<link linkend="void">void</link>                <link linkend="cogl-rectangles">cogl_rectangles</link>                     (const <link linkend="float">float</link> *verts,
                                                         <link linkend="guint">guint</link> n_rects);
<link linkend="void">void</link>                <link linkend="cogl-rectangle-with-texture-coords">cogl_rectangle_with_texture_coords</link>  (<link linkend="float">float</link> x1,
                                                         <link linkend="float">float</link> y1,
                                                         <link linkend="float">float</link> x2,
                                                         <link linkend="float">float</link> y2,
                                                         <link linkend="float">float</link> tx1,
                                                         <link linkend="float">float</link> ty1,
                                                         <link linkend="float">float</link> tx2,
                                                         <link linkend="float">float</link> ty2);
<link linkend="void">void</link>                <link linkend="cogl-rectangles-with-texture-coords">cogl_rectangles_with_texture_coords</link> (const <link linkend="float">float</link> *verts,
                                                         <link linkend="guint">guint</link> n_rects);
<link linkend="void">void</link>                <link linkend="cogl-rectangle-with-multitexture-coords">cogl_rectangle_with_multitexture_coords</link>
                                                        (<link linkend="float">float</link> x1,
                                                         <link linkend="float">float</link> y1,
                                                         <link linkend="float">float</link> x2,
                                                         <link linkend="float">float</link> y2,
                                                         const <link linkend="float">float</link> *tex_coords,
                                                         <link linkend="gint">gint</link> tex_coords_len);
<link linkend="void">void</link>                <link linkend="cogl-polygon">cogl_polygon</link>                        (<link linkend="CoglTextureVertex">CoglTextureVertex</link> *vertices,
                                                         <link linkend="guint">guint</link> n_vertices,
                                                         <link linkend="gboolean">gboolean</link> use_color);

<link linkend="void">void</link>                <link linkend="cogl-path-new">cogl_path_new</link>                       (void);
<link linkend="void">void</link>                <link linkend="cogl-path-move-to">cogl_path_move_to</link>                   (<link linkend="float">float</link> x,
                                                         <link linkend="float">float</link> y);
<link linkend="void">void</link>                <link linkend="cogl-path-close">cogl_path_close</link>                     (void);
<link linkend="void">void</link>                <link linkend="cogl-path-line-to">cogl_path_line_to</link>                   (<link linkend="float">float</link> x,
                                                         <link linkend="float">float</link> y);
<link linkend="void">void</link>                <link linkend="cogl-path-curve-to">cogl_path_curve_to</link>                  (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2,
                                                         <link linkend="float">float</link> x_3,
                                                         <link linkend="float">float</link> y_3);
<link linkend="void">void</link>                <link linkend="cogl-path-arc">cogl_path_arc</link>                       (<link linkend="float">float</link> center_x,
                                                         <link linkend="float">float</link> center_y,
                                                         <link linkend="float">float</link> radius_x,
                                                         <link linkend="float">float</link> radius_y,
                                                         <link linkend="float">float</link> angle_1,
                                                         <link linkend="float">float</link> angle_2);
<link linkend="void">void</link>                <link linkend="cogl-path-rel-move-to">cogl_path_rel_move_to</link>               (<link linkend="float">float</link> x,
                                                         <link linkend="float">float</link> y);
<link linkend="void">void</link>                <link linkend="cogl-path-rel-line-to">cogl_path_rel_line_to</link>               (<link linkend="float">float</link> x,
                                                         <link linkend="float">float</link> y);
<link linkend="void">void</link>                <link linkend="cogl-path-rel-curve-to">cogl_path_rel_curve_to</link>              (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2,
                                                         <link linkend="float">float</link> x_3,
                                                         <link linkend="float">float</link> y_3);
<link linkend="void">void</link>                <link linkend="cogl-path-line">cogl_path_line</link>                      (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2);
<link linkend="void">void</link>                <link linkend="cogl-path-polyline">cogl_path_polyline</link>                  (<link linkend="float">float</link> *coords,
                                                         <link linkend="gint">gint</link> num_points);
<link linkend="void">void</link>                <link linkend="cogl-path-polygon">cogl_path_polygon</link>                   (<link linkend="float">float</link> *coords,
                                                         <link linkend="gint">gint</link> num_points);
<link linkend="void">void</link>                <link linkend="cogl-path-rectangle">cogl_path_rectangle</link>                 (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2);
<link linkend="void">void</link>                <link linkend="cogl-path-round-rectangle">cogl_path_round_rectangle</link>           (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2,
                                                         <link linkend="float">float</link> radius,
                                                         <link linkend="float">float</link> arc_step);
<link linkend="void">void</link>                <link linkend="cogl-path-ellipse">cogl_path_ellipse</link>                   (<link linkend="float">float</link> center_x,
                                                         <link linkend="float">float</link> center_y,
                                                         <link linkend="float">float</link> radius_x,
                                                         <link linkend="float">float</link> radius_y);

<link linkend="void">void</link>                <link linkend="cogl-path-fill">cogl_path_fill</link>                      (void);
<link linkend="void">void</link>                <link linkend="cogl-path-fill-preserve">cogl_path_fill_preserve</link>             (void);
<link linkend="void">void</link>                <link linkend="cogl-path-stroke">cogl_path_stroke</link>                    (void);
<link linkend="void">void</link>                <link linkend="cogl-path-stroke-preserve">cogl_path_stroke_preserve</link>           (void);
#define             <link linkend="cogl-color">cogl_color</link>
</synopsis>
</refsynopsisdiv>









<refsect1 id="cogl-Primitives.description" role="desc">
<title role="desc.title">Description</title>
<para>
There are three levels on which drawing with cogl can be used. The
highest level functions construct various simple primitive shapes
to be either filled or stroked. Using a lower-level set of functions
more complex and arbitrary paths can be constructed by concatenating
straight line, bezier curve and arc segments. Additionally there
are utility functions that draw the most common primitives - rectangles
and trapezoids - in a maximaly optimized fashion.
</para>
<para>
When constructing arbitrary paths, the current pen location is
initialized using the move_to command. The subsequent path segments
implicitly use the last pen location as their first vertex and move
the pen location to the last vertex they produce at the end. Also
there are special versions of functions that allow specifying the
vertices of the path segments relative to the last pen location
rather then in the absolute coordinates.</para>
<para>
</para>
</refsect1>

<refsect1 id="cogl-Primitives.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="cogl-rectangle" role="function">
<title>cogl_rectangle ()</title>
<indexterm zone="cogl-rectangle"><primary sortas="rectangle">cogl_rectangle</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_rectangle                      (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2);</programlisting>
<para>
Fills a rectangle at the given coordinates with the current source material</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x_1</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the top-left corner
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_1</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the top-left corner
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_2</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the bottom-right corner
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_2</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the bottom-right corner
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-rectangles" role="function" condition="since:1.0">
<title>cogl_rectangles ()</title>
<indexterm zone="cogl-rectangles" role="1.0"><primary sortas="rectangles">cogl_rectangles</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_rectangles                     (const <link linkend="float">float</link> *verts,
                                                         <link linkend="guint">guint</link> n_rects);</programlisting>
<para>
Draws a series of rectangles in the same way that
<link linkend="cogl-rectangle"><function>cogl_rectangle()</function></link> does. In some situations it can give a
significant performance boost to use this function rather than
calling <link linkend="cogl-rectangle"><function>cogl_rectangle()</function></link> separately for each rectangle.
</para>
<para>
<parameter>verts</parameter> should point to an array of <link linkend="float"><type>float</type></link><!-- -->s with
<parameter>n_rects</parameter> * 4 elements. Each group of 4 values corresponds to the
parameters x1, y1, x2, and y2, and have the same
meaning as in <link linkend="cogl-rectangle"><function>cogl_rectangle()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>verts</parameter>&#160;:</term>
<listitem><simpara> an array of vertices
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_rects</parameter>&#160;:</term>
<listitem><simpara> number of rectangles to draw
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="cogl-rectangle-with-texture-coords" role="function">
<title>cogl_rectangle_with_texture_coords ()</title>
<indexterm zone="cogl-rectangle-with-texture-coords"><primary sortas="rectangle_with_texture_coords">cogl_rectangle_with_texture_coords</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_rectangle_with_texture_coords  (<link linkend="float">float</link> x1,
                                                         <link linkend="float">float</link> y1,
                                                         <link linkend="float">float</link> x2,
                                                         <link linkend="float">float</link> y2,
                                                         <link linkend="float">float</link> tx1,
                                                         <link linkend="float">float</link> ty1,
                                                         <link linkend="float">float</link> tx2,
                                                         <link linkend="float">float</link> ty2);</programlisting>
<para>
Draw a rectangle using the current material and supply texture coordinates
to be used for the first texture layer of the material. To draw the entire
texture pass in <parameter>tx1</parameter>=0.0 <parameter>ty1</parameter>=0.0 <parameter>tx2</parameter>=1.0 <parameter>ty2</parameter>=1.0.
</para>
<para>
Since 1.0</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x1</parameter>&#160;:</term>
<listitem><simpara> x coordinate upper left on screen.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y1</parameter>&#160;:</term>
<listitem><simpara> y coordinate upper left on screen.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x2</parameter>&#160;:</term>
<listitem><simpara> x coordinate lower right on screen.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y2</parameter>&#160;:</term>
<listitem><simpara> y coordinate lower right on screen.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tx1</parameter>&#160;:</term>
<listitem><simpara> x part of texture coordinate to use for upper left pixel
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ty1</parameter>&#160;:</term>
<listitem><simpara> y part of texture coordinate to use for upper left pixel
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tx2</parameter>&#160;:</term>
<listitem><simpara> x part of texture coordinate to use for lower right pixel
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ty2</parameter>&#160;:</term>
<listitem><simpara> y part of texture coordinate to use for left pixel
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-rectangles-with-texture-coords" role="function" condition="since:0.8.6">
<title>cogl_rectangles_with_texture_coords ()</title>
<indexterm zone="cogl-rectangles-with-texture-coords" role="0.8.6"><primary sortas="rectangles_with_texture_coords">cogl_rectangles_with_texture_coords</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_rectangles_with_texture_coords (const <link linkend="float">float</link> *verts,
                                                         <link linkend="guint">guint</link> n_rects);</programlisting>
<para>
Draws a series of rectangles in the same way that
<link linkend="cogl-rectangle-with-texture-coords"><function>cogl_rectangle_with_texture_coords()</function></link> does. In some situations it can give a
significant performance boost to use this function rather than
calling <link linkend="cogl-rectangle-with-texture-coords"><function>cogl_rectangle_with_texture_coords()</function></link> separately for each rectangle.
</para>
<para>
<parameter>verts</parameter> should point to an array of <link linkend="float"><type>float</type></link><!-- -->s with
<parameter>n_rects</parameter> * 8 elements. Each group of 8 values corresponds to the
parameters x1, y1, x2, y2, tx1, ty1, tx2 and ty2 and have the same
meaning as in <link linkend="cogl-rectangle-with-texture-coords"><function>cogl_rectangle_with_texture_coords()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>verts</parameter>&#160;:</term>
<listitem><simpara> an array of vertices
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_rects</parameter>&#160;:</term>
<listitem><simpara> number of rectangles to draw
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.8.6</para></refsect2>
<refsect2 id="cogl-rectangle-with-multitexture-coords" role="function">
<title>cogl_rectangle_with_multitexture_coords ()</title>
<indexterm zone="cogl-rectangle-with-multitexture-coords"><primary sortas="rectangle_with_multitexture_coords">cogl_rectangle_with_multitexture_coords</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_rectangle_with_multitexture_coords
                                                        (<link linkend="float">float</link> x1,
                                                         <link linkend="float">float</link> y1,
                                                         <link linkend="float">float</link> x2,
                                                         <link linkend="float">float</link> y2,
                                                         const <link linkend="float">float</link> *tex_coords,
                                                         <link linkend="gint">gint</link> tex_coords_len);</programlisting>
<para>
This function draws a rectangle using the current source material to
texture or fill with. As a material may contain multiple texture layers
this interface lets you supply texture coordinates for each layer of the
material.
</para>
<para>
The first pair of coordinates are for the first layer (with the smallest
layer index) and if you supply less texture coordinates than there are
layers in the current source material then default texture coordinates
(0.0, 0.0, 1.0, 1.0) are generated.
</para>
<para>
Since 1.0</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x1</parameter>&#160;:</term>
<listitem><simpara> x coordinate upper left on screen.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y1</parameter>&#160;:</term>
<listitem><simpara> y coordinate upper left on screen.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x2</parameter>&#160;:</term>
<listitem><simpara> x coordinate lower right on screen.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y2</parameter>&#160;:</term>
<listitem><simpara> y coordinate lower right on screen.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tex_coords</parameter>&#160;:</term>
<listitem><simpara> An array containing groups of 4 float values:
  [tx1, ty1, tx2, ty2] that are interpreted as two texture coordinates; one
  for the upper left texel, and one for the lower right texel. Each value
  should be between 0.0 and 1.0, where the coordinate (0.0, 0.0) represents
  the top left of the texture, and (1.0, 1.0) the bottom right.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tex_coords_len</parameter>&#160;:</term>
<listitem><simpara> The length of the tex_coords array. (e.g. for one layer
                 and one group of texture coordinates, this would be 4)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-polygon" role="function">
<title>cogl_polygon ()</title>
<indexterm zone="cogl-polygon"><primary sortas="polygon">cogl_polygon</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_polygon                        (<link linkend="CoglTextureVertex">CoglTextureVertex</link> *vertices,
                                                         <link linkend="guint">guint</link> n_vertices,
                                                         <link linkend="gboolean">gboolean</link> use_color);</programlisting>
<para>
Draws a convex polygon using the current source material to fill / texture
with according to the texture coordinates passed.
</para>
<para>
If <parameter>use_color</parameter> is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> then the color will be changed for each vertex using
the value specified in the color member of <link linkend="CoglTextureVertex"><type>CoglTextureVertex</type></link>. This can be
used for example to make the texture fade out by setting the alpha value of
the color.
</para>
<para>
All of the texture coordinates must be in the range [0,1] and repeating the
texture is not supported.
</para>
<para>
Because of the way this function is implemented it will currently only work
if either the texture is not sliced or the backend is not OpenGL ES and the
minifying and magnifying functions are both set to CGL_NEAREST.
</para>
<para>
Since 1.0</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vertices</parameter>&#160;:</term>
<listitem><simpara> An array of <link linkend="CoglTextureVertex"><type>CoglTextureVertex</type></link> structs
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_vertices</parameter>&#160;:</term>
<listitem><simpara> The length of the vertices array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>use_color</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the color member of <link linkend="CoglTextureVertex"><type>CoglTextureVertex</type></link> should be used
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-new" role="function" condition="since:1.0">
<title>cogl_path_new ()</title>
<indexterm zone="cogl-path-new" role="1.0"><primary sortas="path_new">cogl_path_new</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_new                       (void);</programlisting>
<para>
Clears the current path and starts a new one.</para>
<para>
</para><para role="since">Since 1.0</para></refsect2>
<refsect2 id="cogl-path-move-to" role="function">
<title>cogl_path_move_to ()</title>
<indexterm zone="cogl-path-move-to"><primary sortas="path_move_to">cogl_path_move_to</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_move_to                   (<link linkend="float">float</link> x,
                                                         <link linkend="float">float</link> y);</programlisting>
<para>
Moves the pen to the given location. If there is an existing path
this will start a new disjoint subpath.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the pen location to move to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the pen location to move to.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-close" role="function">
<title>cogl_path_close ()</title>
<indexterm zone="cogl-path-close"><primary sortas="path_close">cogl_path_close</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_close                     (void);</programlisting>
<para>
Closes the path being constructed by adding a straight line segment
to it that ends at the first vertex of the path.</para>
<para>
</para></refsect2>
<refsect2 id="cogl-path-line-to" role="function">
<title>cogl_path_line_to ()</title>
<indexterm zone="cogl-path-line-to"><primary sortas="path_line_to">cogl_path_line_to</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_line_to                   (<link linkend="float">float</link> x,
                                                         <link linkend="float">float</link> y);</programlisting>
<para>
Adds a straight line segment to the current path that ends at the
given coordinates.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the end line vertex
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the end line vertex
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-curve-to" role="function">
<title>cogl_path_curve_to ()</title>
<indexterm zone="cogl-path-curve-to"><primary sortas="path_curve_to">cogl_path_curve_to</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_curve_to                  (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2,
                                                         <link linkend="float">float</link> x_3,
                                                         <link linkend="float">float</link> y_3);</programlisting>
<para>
Adds a cubic bezier curve segment to the current path with the given
second, third and fourth control points and using current pen location
as the first control point.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x_1</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the second bezier control point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_1</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the second bezier control point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_2</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the third bezier control point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_2</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the third bezier control point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_3</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the fourth bezier control point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_3</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the fourth bezier control point
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-arc" role="function">
<title>cogl_path_arc ()</title>
<indexterm zone="cogl-path-arc"><primary sortas="path_arc">cogl_path_arc</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_arc                       (<link linkend="float">float</link> center_x,
                                                         <link linkend="float">float</link> center_y,
                                                         <link linkend="float">float</link> radius_x,
                                                         <link linkend="float">float</link> radius_y,
                                                         <link linkend="float">float</link> angle_1,
                                                         <link linkend="float">float</link> angle_2);</programlisting>
<para>
Adds an elliptical arc segment to the current path. A straight line
segment will link the current pen location with the first vertex
of the arc. If you perform a move_to to the arcs start just before
drawing it you create a free standing arc.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>center_x</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the elliptical arc center
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>center_y</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the elliptical arc center
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>radius_x</parameter>&#160;:</term>
<listitem><simpara> X radius of the elliptical arc
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>radius_y</parameter>&#160;:</term>
<listitem><simpara> Y radius of the elliptical arc
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>angle_1</parameter>&#160;:</term>
<listitem><simpara> Angle in the unit-circle at which the arc begin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>angle_2</parameter>&#160;:</term>
<listitem><simpara> Angle in the unit-circle at which the arc ends
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-rel-move-to" role="function">
<title>cogl_path_rel_move_to ()</title>
<indexterm zone="cogl-path-rel-move-to"><primary sortas="path_rel_move_to">cogl_path_rel_move_to</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_rel_move_to               (<link linkend="float">float</link> x,
                                                         <link linkend="float">float</link> y);</programlisting>
<para>
Moves the pen to the given offset relative to the current pen
location. If there is an existing path this will start a new
disjoint subpath.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> X offset from the current pen location to move the pen to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> Y offset from the current pen location to move the pen to.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-rel-line-to" role="function">
<title>cogl_path_rel_line_to ()</title>
<indexterm zone="cogl-path-rel-line-to"><primary sortas="path_rel_line_to">cogl_path_rel_line_to</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_rel_line_to               (<link linkend="float">float</link> x,
                                                         <link linkend="float">float</link> y);</programlisting>
<para>
Adds a straight line segment to the current path that ends at the
given coordinates relative to the current pen location.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> X offset from the current pen location of the end line vertex
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> Y offset from the current pen location of the end line vertex
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-rel-curve-to" role="function">
<title>cogl_path_rel_curve_to ()</title>
<indexterm zone="cogl-path-rel-curve-to"><primary sortas="path_rel_curve_to">cogl_path_rel_curve_to</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_rel_curve_to              (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2,
                                                         <link linkend="float">float</link> x_3,
                                                         <link linkend="float">float</link> y_3);</programlisting>
<para>
Adds a cubic bezier curve segment to the current path with the given
second, third and fourth control points and using current pen location
as the first control point. The given coordinates are relative to the
current pen location.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x_1</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the second bezier control point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_1</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the second bezier control point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_2</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the third bezier control point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_2</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the third bezier control point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_3</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the fourth bezier control point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_3</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the fourth bezier control point
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-line" role="function">
<title>cogl_path_line ()</title>
<indexterm zone="cogl-path-line"><primary sortas="path_line">cogl_path_line</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_line                      (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2);</programlisting>
<para>
Constructs a straight line shape starting and ending at the given
coordinates. If there is an existing path this will start a new
disjoint sub-path.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x_1</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the start line vertex
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_1</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the start line vertex
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_2</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the end line vertex
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_2</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the end line vertex
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-polyline" role="function">
<title>cogl_path_polyline ()</title>
<indexterm zone="cogl-path-polyline"><primary sortas="path_polyline">cogl_path_polyline</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_polyline                  (<link linkend="float">float</link> *coords,
                                                         <link linkend="gint">gint</link> num_points);</programlisting>
<para>
Constructs a series of straight line segments, starting from the
first given vertex coordinate. If there is an existing path this
will start a new disjoint sub-path. Each subsequent segment starts
where the previous one ended and ends at the next given vertex
coordinate.
</para>
<para>
The coords array must contain 2 * num_points values. The first value
represents the X coordinate of the first vertex, the second value
represents the Y coordinate of the first vertex, continuing in the same
fashion for the rest of the vertices. (num_points - 1) segments will
be constructed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>coords</parameter>&#160;:</term>
<listitem><simpara> A pointer to the first element of an array of fixed-point
values that specify the vertex coordinates.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num_points</parameter>&#160;:</term>
<listitem><simpara> The total number of vertices.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-polygon" role="function">
<title>cogl_path_polygon ()</title>
<indexterm zone="cogl-path-polygon"><primary sortas="path_polygon">cogl_path_polygon</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_polygon                   (<link linkend="float">float</link> *coords,
                                                         <link linkend="gint">gint</link> num_points);</programlisting>
<para>
Constructs a polygonal shape of the given number of vertices. If
there is an existing path this will start a new disjoint sub-path.
</para>
<para>
The coords array must contain 2 * num_points values. The first value
represents the X coordinate of the first vertex, the second value
represents the Y coordinate of the first vertex, continuing in the same
fashion for the rest of the vertices.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>coords</parameter>&#160;:</term>
<listitem><simpara> A pointer to the first element of an array of fixed-point
values that specify the vertex coordinates.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num_points</parameter>&#160;:</term>
<listitem><simpara> The total number of vertices.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-rectangle" role="function">
<title>cogl_path_rectangle ()</title>
<indexterm zone="cogl-path-rectangle"><primary sortas="path_rectangle">cogl_path_rectangle</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_rectangle                 (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2);</programlisting>
<para>
Constructs a rectangular shape at the given coordinates. If there
is an existing path this will start a new disjoint sub-path.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x_1</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the top-left corner.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_1</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the top-left corner.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_2</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the bottom-right corner.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_2</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the bottom-right corner.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-round-rectangle" role="function">
<title>cogl_path_round_rectangle ()</title>
<indexterm zone="cogl-path-round-rectangle"><primary sortas="path_round_rectangle">cogl_path_round_rectangle</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_round_rectangle           (<link linkend="float">float</link> x_1,
                                                         <link linkend="float">float</link> y_1,
                                                         <link linkend="float">float</link> x_2,
                                                         <link linkend="float">float</link> y_2,
                                                         <link linkend="float">float</link> radius,
                                                         <link linkend="float">float</link> arc_step);</programlisting>
<para>
Constructs a rectangular shape with rounded corners. If there is an
existing path this will start a new disjoint sub-path.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x_1</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the top-left corner.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_1</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the top-left corner.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_2</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the bottom-right corner.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_2</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the bottom-right corner.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>radius</parameter>&#160;:</term>
<listitem><simpara> Radius of the corner arcs.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arc_step</parameter>&#160;:</term>
<listitem><simpara> Angle increment resolution for subdivision of
the corner arcs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-ellipse" role="function">
<title>cogl_path_ellipse ()</title>
<indexterm zone="cogl-path-ellipse"><primary sortas="path_ellipse">cogl_path_ellipse</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_ellipse                   (<link linkend="float">float</link> center_x,
                                                         <link linkend="float">float</link> center_y,
                                                         <link linkend="float">float</link> radius_x,
                                                         <link linkend="float">float</link> radius_y);</programlisting>
<para>
Constructs an ellipse shape. If there is an existing path this will
start a new disjoint sub-path.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>center_x</parameter>&#160;:</term>
<listitem><simpara> X coordinate of the ellipse center
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>center_y</parameter>&#160;:</term>
<listitem><simpara> Y coordinate of the ellipse center
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>radius_x</parameter>&#160;:</term>
<listitem><simpara> X radius of the ellipse
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>radius_y</parameter>&#160;:</term>
<listitem><simpara> Y radius of the ellipse
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cogl-path-fill" role="function">
<title>cogl_path_fill ()</title>
<indexterm zone="cogl-path-fill"><primary sortas="path_fill">cogl_path_fill</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_fill                      (void);</programlisting>
<para>
Fills the constructed shape using the current drawing color. The
current path is then cleared. To use the path again, call
<link linkend="cogl-path-fill-preserve"><function>cogl_path_fill_preserve()</function></link> instead.</para>
<para>
</para></refsect2>
<refsect2 id="cogl-path-fill-preserve" role="function" condition="since:1.0">
<title>cogl_path_fill_preserve ()</title>
<indexterm zone="cogl-path-fill-preserve" role="1.0"><primary sortas="path_fill_preserve">cogl_path_fill_preserve</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_fill_preserve             (void);</programlisting>
<para>
Fills the constructed shape using the current drawing color and
preserves the path to be used again.</para>
<para>
</para><para role="since">Since 1.0</para></refsect2>
<refsect2 id="cogl-path-stroke" role="function">
<title>cogl_path_stroke ()</title>
<indexterm zone="cogl-path-stroke"><primary sortas="path_stroke">cogl_path_stroke</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_stroke                    (void);</programlisting>
<para>
Strokes the constructed shape using the current drawing color and a
width of 1 pixel (regardless of the current transformation
matrix). To current path is then cleared. To use the path again,
call <link linkend="cogl-path-stroke-preserve"><function>cogl_path_stroke_preserve()</function></link> instead.</para>
<para>
</para></refsect2>
<refsect2 id="cogl-path-stroke-preserve" role="function" condition="since:1.0">
<title>cogl_path_stroke_preserve ()</title>
<indexterm zone="cogl-path-stroke-preserve" role="1.0"><primary sortas="path_stroke_preserve">cogl_path_stroke_preserve</primary></indexterm><programlisting><link linkend="void">void</link>                cogl_path_stroke_preserve           (void);</programlisting>
<para>
Strokes the constructed shape using the current drawing color and
preserves the path to be used again.</para>
<para>
</para><para role="since">Since 1.0</para></refsect2>
<refsect2 id="cogl-color" role="macro">
<title>cogl_color</title>
<indexterm zone="cogl-color"><primary sortas="color">cogl_color</primary></indexterm><programlisting>#define cogl_color                      cogl_color_REPLACED_BY_cogl_set_source_color
</programlisting>
<para>
</para></refsect2>

</refsect1>




</refentry>
